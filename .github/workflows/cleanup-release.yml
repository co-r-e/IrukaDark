name: Cleanup Release Assets

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to clean (e.g., v1.0.0)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cleanup assets and update body
        uses: actions/github-script@v7
        with:
          script: |
            const tag = core.getInput('tag');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Fetch release by tag
            let rel;
            try {
              rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
            } catch (e) {
              core.setFailed(`Release for tag ${tag} not found: ${e.message}`);
              return;
            }
            const releaseId = rel.data.id;
            // Allowlist of patterns to keep
            const keep = [
              /-win-x64\.exe$/,
              /-win-x64\.exe\.sha256$/,
              /-mac-arm64\.dmg$/,
              /-mac-arm64\.dmg\.sha256$/,
              /-linux-x86_64\.AppImage$/,
              /-linux-x86_64\.AppImage\.sha256$/,
              /-linux-x64\.deb$/,
              /-linux-x64\.deb\.sha256$/,
              /-linux-x64\.rpm$/,
              /-linux-x64\.rpm\.sha256$/,
              /^SHA256SUMS\.txt$/
            ];
            const isKeep = (name) => keep.some((r) => r.test(name));

            // List assets and delete unwanted ones
            const assets = await github.paginate(github.rest.repos.listReleaseAssets, { owner, repo, release_id: releaseId, per_page: 100 });
            for (const a of assets) {
              if (!isKeep(a.name)) {
                core.info(`Deleting asset: ${a.name}`);
                await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: a.id });
              } else {
                core.info(`Keeping asset: ${a.name}`);
              }
            }

            // Read minimal notes from repo file
            const fs = require('fs');
            let body = '';
            try {
              body = fs.readFileSync('docs/RELEASE_NOTES_TEMPLATE.md', 'utf8');
            } catch {}
            if (body) {
              await github.rest.repos.updateRelease({ owner, repo, release_id: releaseId, body });
              core.info('Updated release body from docs/RELEASE_NOTES_TEMPLATE.md');
            }
