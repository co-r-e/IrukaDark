name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write   # リリース作成・アセットアップロードに必要

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Create release for ${{ github.ref_name }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_macos:
    name: Build macOS (${{ matrix.arch }})
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Apple Silicon
          - arch: arm64
            runs_on: macos-15
          # Intel（必要に応じて macos-15-intel 等へ切替可）
          - arch: x64
            runs_on: macos-13
    runs-on: ${{ matrix.runs_on }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20 (npm cache enabled)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (npm)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build Swift automation bridge
        shell: bash
        run: |
          set -euxo pipefail
          npm run build:swift

      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-${{ matrix.arch }}-electron-${{ hashFiles('**/package-lock.json') }}

      - name: Decode signing certs and Apple API key
        env:
          CSC_LINK_BASE64: ${{ secrets.CSC_LINK_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
        run: |
          set -euxo pipefail
          CERT_PATH="$RUNNER_TEMP/cert.p12"
          API_KEY_PATH="$RUNNER_TEMP/AuthKey.p8"
          # Developer ID (.p12)
          echo "$CSC_LINK_BASE64" | base64 --decode > "$CERT_PATH"
          {
            echo "CSC_LINK=$CERT_PATH"
            echo "CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD"
          } >> "$GITHUB_ENV"
          # App Store Connect API Key (.p8)
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > "$API_KEY_PATH"
          echo "APPLE_API_KEY=$API_KEY_PATH" >> "$GITHUB_ENV"
          if [ -n "${APPLE_TEAM_ID:-}" ]; then
            echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> "$GITHUB_ENV"
          fi

      - name: Build DMG (${{ matrix.arch }}) with electron-builder
        env:
          # notarize 用（electron-builder が自動で notarytool を利用）
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_TEAM_ID: ${{ env.APPLE_TEAM_ID }}
          # electron-builder が GitHub API を叩く際のトークン（安全側で渡しておく）
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 詳細ログを出して codesign/notarize の状況を可視化
          DEBUG: electron-builder,electron-notarize,electron-osx-sign*
          ELECTRON_BUILDER_DEBUG: 'true'
        run: |
          set -euxo pipefail
          npx electron-builder --mac dmg --${{ matrix.arch }} --publish=never

      - name: Publish ZIP for auto‑update (GitHub provider)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ env.APPLE_API_KEY }}
          APPLE_TEAM_ID: ${{ env.APPLE_TEAM_ID }}
        run: |
          set -euxo pipefail
          # Build and publish only ZIP + update YAML to the GitHub Release
          npx electron-builder --mac zip --${{ matrix.arch }} --publish=always

      - name: Generate SHA256 checksums
        shell: bash
        run: |
          set -euxo pipefail
          shopt -s nullglob
          cd dist
          for f in *.dmg; do
            shasum -a 256 "$f" > "$f.sha256"
          done

      - name: Upload DMG and checksums to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.dmg
            dist/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
