name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  # electron-builder uses GH_TOKEN to create/upload GitHub Releases
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  prepare:
    name: Prepare Release (overwrite-safe)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure gh is available
        run: gh --version

      - name: Delete existing release if present
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Existing release for $TAG found. Deletingâ€¦"
            gh release delete "$TAG" -y || true
          else
            echo "No existing release for $TAG."
          fi

      - name: Re-create empty release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          TITLE="IrukaDark ${TAG}"
          gh release create "$TAG" --title "$TITLE" --notes "Automated build for $TAG" --latest --target ${{ github.sha }}
  mac-x64:
    needs: prepare
    if: ${{ secrets.MAC_CSC_LINK != '' && secrets.MAC_CSC_KEY_PASSWORD != '' && secrets.APPLE_ID != '' && secrets.APPLE_APP_SPECIFIC_PASSWORD != '' && secrets.APPLE_TEAM_ID != '' }}
    name: macOS x64 (Intel)
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Build & Publish (unsigned if no cert)
        env:
          # macOS signing (optional)
          CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          if [[ -n "${CSC_LINK:-}" && -n "${CSC_KEY_PASSWORD:-}" ]]; then
            echo "Signing enabled (Developer ID certificate provided)."
            npm run dist:mac:x64
          else
            echo "Signing secrets not set. Building unsigned."
            npx electron-builder --mac dmg --x64 --config.mac.identity=null --publish always
          fi

      - name: Generate SHA-256 checksums
        run: node scripts/generate-sha256.js

      - name: Upload checksums to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          ls dist/*.sha256
          gh release upload "${{ github.ref_name }}" dist/*.sha256 --clobber

  mac-arm64:
    needs: prepare
    if: ${{ secrets.MAC_CSC_LINK != '' && secrets.MAC_CSC_KEY_PASSWORD != '' && secrets.APPLE_ID != '' && secrets.APPLE_APP_SPECIFIC_PASSWORD != '' && secrets.APPLE_TEAM_ID != '' }}
    name: macOS arm64 (Apple Silicon)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Build & Publish (unsigned if no cert)
        env:
          CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          if [[ -n "${CSC_LINK:-}" && -n "${CSC_KEY_PASSWORD:-}" ]]; then
            echo "Signing enabled (Developer ID certificate provided)."
            npm run dist:mac:arm64
          else
            echo "Signing secrets not set. Building unsigned."
            npx electron-builder --mac dmg --arm64 --config.mac.identity=null --publish always
          fi

      - name: Generate SHA-256 checksums
        run: node scripts/generate-sha256.js

      - name: Upload checksums to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          ls dist/*.sha256
          gh release upload "${{ github.ref_name }}" dist/*.sha256 --clobber

  windows-x64:
    needs: prepare
    name: Windows x64
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Build & Publish (sign if secrets)
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${CSC_LINK:-}" && -n "${CSC_KEY_PASSWORD:-}" ]]; then
            echo "Windows signing enabled (PFX provided)."
            npm run dist:win
          else
            echo "Windows signing secrets not set. Building unsigned."
            # Ensure any repository-level variables do not force signing
            unset CSC_LINK CSC_KEY_PASSWORD WIN_CSC_LINK WIN_CSC_KEY_PASSWORD || true
            export CSC_IDENTITY_AUTO_DISCOVERY=false
            npx electron-builder --win nsis --x64 --publish always
          fi

      - name: Generate SHA-256 checksums
        shell: bash
        run: node scripts/generate-sha256.js

      - name: Upload checksums to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          ls dist/*.sha256
          gh release upload "${{ github.ref_name }}" dist/*.sha256 --clobber

  linux-x64:
    needs: prepare
    name: Linux x64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Build & Publish
        run: npm run dist:linux

      - name: Generate SHA-256 checksums
        run: node scripts/generate-sha256.js

      - name: Upload checksums to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          ls dist/*.sha256
          gh release upload "${{ github.ref_name }}" dist/*.sha256 --clobber
